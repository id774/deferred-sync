======================
主要なモジュールの説明
======================

* get_resources
ログファイルにリソース状況を出力する。

[概要]
このモジュールは実行時に uptime や free, df 等を
利用してリソースの概況を取得し出力する。

このモジュールは RHEL 系または Debian 系の
Linux ディストリビューションでしか動作しない。
Solaris 及び Mac OS X は対象外である。

ログに取得しない場合はロードする必要は無い。


* system_upgrade
システムを最新化する。

[概要]
システムを最新化するモジュールである。

このモジュールは RHEL 系または Debian 系の
Linux ディストリビューションでしか動作しない。
Solaris 及び Mac OS X は対象外である。


* ubuntu_kernel_upgrade
Ubuntu のカーネルをアップグレードする。

[概要]
Ubuntu ではデフォルトでカーネルがホールドされており
単なる apt-get upgrade では最新化されない。
このモジュールは Ubuntu のカーネルを最新に更新する。

[実行条件]
アップグレード対象は Ubuntu の標準カーネルのみである。
Ubuntu 以外のディストリビューションには対応していない。
また標準以外の backport カーネルや rt カーネル、独自
ビルドのカーネルを利用している場合は正常に動作しない
ので注意する。

[仕様]
現行バージョン以外のカーネルを抹消する。
次に UBUNTU_ARCHITECTURE で指定したアーキテクチャの
最新カーネルをインストールする。
したがって現行カーネルと最新カーネルの 2 つが常に残り
それ以外のカーネルは自動的に消去される。

アーキテクチャは以下の変数で指定する。

(例)
UBUNTU_ARCHITECTURE="generic"

アーキテクチャには generic と server のいずれかを
指定することができる。その他のアーキテクチャでは
テストされていない。


* dump_svn
SVN ダンプを取得する。

[概要]
SVN をダンプし zip でアーカイブする。
svndump は冗長性が高いため zip で圧縮することで
容量を節約する。

[実行条件]
backup_to_remote と併用する場合はその実行前に
本モジュールが呼ばれるようにする。

SVNPATH には SVN の設定ファイルで定義された
SVNParentPath のパスを指定する。
この場合マルチテナントであっても SVN_REPOS に
複数のリポジトリ名を指定することですべてダンプ
することが可能になる。

[仕様]
dump_svn 関数
設定ファイルで定義された変数 SVN_REPOS の文字列
に定義されたホスト名を解釈し
get_svndump 関数に渡す。
SVN_REPOS は SVN リポジトリ名を指定する。
スペースで区切って複数指定することができる。

(例)
SVN_REPOS="repoa repob project"

get_svndump 関数
設定ファイルで定義された変数 SVNDUMP のディレクトリ
に SVN ダンプを取得し保存する。


* dump_mysql
MySQL ダンプを取得する。

[概要]
MySQL のデータベースをダンプし zip でアーカイブする。
mysqldump は冗長性が高いため zip で圧縮することで
容量を節約する。

[実行条件]
backup_to_remote と併用する場合はその実行前に
本モジュールが呼ばれるようにする。

MySQL に接続するためのユーザー名とパスワードを
MYSQL_USER 及び MYSQL_PASS に定義する。
データベースごとにユーザーとパスワードを使い
分けることはできない。したがってダンプするすべての
データベースを参照可能なユーザーを指定する。

[仕様]
dump_mysql 関数
設定ファイルで定義された変数 MYSQL_DBS の文字列
に定義されたデータベース名を解釈し
get_mysqldump 関数に渡す。

(例)
MYSQL_DBS="db_a db_b mysql"

get_mysqldump 関数
設定ファイルで定義された変数 MYSQLDUMP のディレクトリ
に MySQL ダンプを取得し保存する。

複数のデータベースをダンプする場合は、ダンプのための
ユーザーを作成し mysqldump に必要な権限を付与する。

 grant select, lock tables, show view on DB_NAME.* to
 backup@localhost identified by 'PASSWORD';

MYSQL_USER 及び MYSQL_PASS に定義するユーザー名は
バックアップのためのユーザーアカウントを指定する。


* incremental_backup
世代バックアップを取得する。

[概要]
ローカルホスト内で、保護対象のファイル一式を
退避用のディレクトリに一旦集める。

backup_to_remote を利用して退避したディレクトリ
をリモートホストに転送することで対障害性を確保
することができる。

また退避したディレクトリを外部ディスクに書き出
してバックアップとすることもできる。

いずれにせよ incremental_backup では保護対象の
ファイルを退避用のディレクトリに集めただけなの
で、これに追加して何らかの保護をする必要がある。
通常は backup_to_remote モジュールでリモート
ホストに同期するが、このディレクトリを外部記憶
媒体にコピーするなど他の方法も考えられる。

[世代管理]
保護対象のファイルは rsync の --delete 機能を
利用して変更されたファイルのみ退避する。
またこの際、変更前のファイルは _backup_日付
というディレクトリに退避される。
これにより世代を遡ってリストアすることが可能
である。

[対象除外]
config/exclude.conf ファイルに除外するファイル名を
羅列することにより、マッチしたファイルを対象
から除外することができる。

たとえば dot で始まるディレクトリ名や、一時
ファイルの類など、保護する必要の無いファイル
を指定することができる。

[実行条件]
SVN ダンプや MySQL ダンプを退避して世代管理
したい場合は、これらのモジュールが本モジュール
より先に実行されるようにするべきである。

[仕様]
run_rsync 関数
設定ファイルで定義された変数 BACKUPDIRS
に定義されたディレクトリ名を解釈し
exec_rsync 関数に渡す。

BACKUPDIRS にはディレクトリ名をスペースで
区切って羅列する。ここに定義されたディレクトリ
にあるファイルは退避用のディレクトリにコピー
される。これらは世代管理される。

(例)
BACKUPDIRS="/home/myname /etc /var/log"

purge_expires 関数
世代管理で保護された増分バックアップのうち
EXPIREDAYS に定義された日数以上経過した
ディレクトリを破棄する。

例えばスクリプトの実行日が 2011/10/30 で
EXPIREDAYS が 5 の場合 _backup_20111025
より古いディレクトリは破棄される。

purge_expire_dir 関数
上記の purge_expires 関数から呼ばれ、
実際にディレクトリを削除する処理をする。

rsync_options 関数
最終的に rsync に渡すオプションを生成する。
増分バックアップの退避用ディレクトリ、日付、
除外ファイルがここで rsync のオプションに
変換されマージされる。

exec_rsync 関数
生成された rsync のオプションを引数にして
実際に rsync を実行する。


* backup_to_remote
リモートホストへのファイル転送をおこなう

[概要]
rsync で自動的に他のホストへ保護対象のファイル
を転送する。ローカルホスト障害時に他のホストか
らデータを転送してリカバリすることができる。

複数の拠点にコピーを生成することもでき、リモー
トサイトでは sshd だけ稼働していれば良い。

ポート番号など ssh 接続にパラメータが必要な場
合は ~/.ssh/config で設定することができる。

[実行条件]
本モジュールを利用するためにはローカルホストの
スクリプト実行ユーザーからリモートホストの root
ユーザーへのパスワード無し公開鍵認証が可能であ
る必要がある。

リモートホストの sshd_config にて以下の値を設定
することを推奨する。
PermitRootLogin without-password
ChallengeResponseAuthentication no
usePAM no

[仕様]
backup_to_remote 関数
設定ファイルで定義された変数 REMOTE_HOSTS の文字列
に定義されたホスト名を解釈し
mirror_to_remote 関数に渡す。
REMOTE_HOSTS はリモートホスト名を指定する。
スペースで区切って複数指定することができる。

(例)
REMOTE_HOSTS="hosta hostb 192.168.1.50"

mirror_to_remote 関数
設定ファイルで定義された変数 BACKUPTO のディレクトリ
以下 (ローカルの退避ディレクトリ) をリモートホストに
rsync する。
最初にリモートホストに ping による生死確認をして、
リモートホストから反応が無い場合はリターンコード 1 で
終了する。 (ping が返すリターンコードがそのまま戻る)


* get_remote_dir
リモートのディレクトリをローカルに同期する

[概要]
backup_to_remote とは反対に、リモートで稼動している
サーバーのディレクトリをローカルに同期する。
バックアップサーバー側を主体として運用環境のファイルを
退避するために使われる。

[仕様]
以下の例では remote_server で予めバックアップされた
/home/backup 以下のディレクトリを
/home/remote/remote_server に
同期している。

GET_HOSTS はリモートホスト名を指定する。
スペースで区切って複数指定することができる。
GET_REMOTE_DIR はリモートホスト状の取得したい
ディレクトリ名を指定する。これも複数指定可能である。
GET_TARGET_DIR の下にホスト名ごとのディレクトリが
作成されその下にリモートホストのディレクトリが取得される。

(例)
GET_HOSTS="remote_server web_server 192.168.1.55
GET_REMOTE_DIRS="/home/backup"
GET_TARGET_DIR="/home/remote



モジュールは他にも任意に作成し追加しても良い。
