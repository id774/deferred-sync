deferred-sync

名前
 deferred-sync - 遅延した同期をおこないファイルを保護する

書式
 bin/run

説明
 deferred-sync はローカルで保護対象とするべきファイルを
一箇所のディレクトリに集め、世代管理をおこない、リモート
ホストに同期してバックアップする。

保護対象とするディレクトリは複数指定することができる。
また独立したモジュールと呼ばれるコードを追加することに
より Subversion (SVN) や MySQL, PostgreSQL と
いったリポジトリやデータベースのダンプを取得し対象とする
ことも可能である。

単なるファイルの同期以外にもシステムの自動処理として
あらゆる処理を実行することができる。モジュールと呼ばれる
シェルスクリプトのファイルに自動的に処理したい内容を記述
すれば良い。モジュールのうちどの処理を有効にするかは
環境設定ファイルである sync.conf で設定する。

ファイルの世代管理やリモートホストへの転送のために rsync
を内部的に利用している。したがって耐障害性や信頼性は
rsync (及び ssh) に依存する。
詳しくは rsync(1) の man ページを参照のこと。


========
全体構成
========

主なディレクトリとファイルの構成は以下の通りである。
.
|
+-bin
|   run
|     実行ファイル
|     設定ファイルを読み込み lib/load を動作させ
|     その標準出力及びエラー出力をロギングする
|
+-config
|   sync.conf
|     全体の動作を決定する設定ファイル
|     ただしファイルの実体は /etc/opt に移動し
|     このファイルはシンボリックリンクとするべきである
|
+-etc
|   sync_exclude
|     処理対象外を羅列したファイル
|     一行ずつファイル名または拡張子を記述する
|     いずれかにマッチしたファイルは処理の対象外となる
|
+-lib
|   load
|     モジュールを順次読み込む
|
|   modules
|     モジュールと呼ばれるスクリプトが格納される
|     既定で用意されたモジュールには以下のものがある
|
|     get_resources
|       リソースの取得をおこなう
|     system_upgrade
|       システムを最新化する
|     dump_svn
|       SVN ダンプを取得する
|     dump_mysql
|       MySQL ダンプを取得する
|     incremental_backup
|       世代バックアップをする
|     backup_to_remote
|       リモートホストへ同期する
|     get_remote_dir
|       リモートのディレクトリをローカルに同期する
|
+-install.sh
|   引数で指定したディレクトリに deferred-sync を
|   インストールする
|   引数が無い場合 /opt/deferred-sync にインストールされる
|
+-cron
|   deferred-sync
|     オプション無しでインストーラーを実行した場合
|     この cron スクリプトが配置される
|
+-test
|   test.conf
|     テスト実行時に読み込まれる
|     このディレクトリにはテストのためのコードが置かれる
|
+-doc
    README.ja
      本ドキュメント
    MODULES.ja
      モジュール一覧


========
主な用途
========

 リポジトリサーバーやデータベースサーバーの対障害用
バックアップ、ファイルサーバーや NAS のバックアップ
などに利用できる。

他には静的な Web コンテンツの遅延同期に利用したり
キャッシュをレプリケーションするなど rsync を活用
可能なあらゆる場面に適用できる。

リモートサーバーと通信可能なときのみ同期をおこなう
ので Mac の Time Machine のようにクライアント PC の
バックアップソリューションとして利用することもできる。
(Time Machine も実は内部的に rsync を利用した単なる
ファイルコピープログラムにすぎない)


======
運用例
======

 cron から deferred-sync/bin/run を定期的に
実行するように設定する。これにより保護対象のファイル
及びディレクトリが自動的に一箇所に集められる。

バックアップ用にリモートホストを異なる場所に設置して
おくことで、自動的に同期がおこなわれ、障害発生時に
リモートから復旧することが可能となる。

またファイルは世代バックアップされているため、誤操作
でファイルを上書きした場合でも、以前の世代から復旧す
ることも可能である。保存する世代数は設定ファイルで
決定する。

+----------------------+
|     本 番 環 境      | (データセンター)
+----------------------+
           |
           | cron で毎日実行され同期される
           |
+----------------------+
| バックアップサーバー | (遠隔地)
+----------------------+

これらは物理マシンである必要はなく、物理的に独立した
ハイパーバイザー上の別の仮想マシンでも良い。


========
動作環境
========

 一般的な GNU/Linux 及び UNIX 互換環境で動作する。

- Red Hat Enterprise Linux 5 以降
- CentOS 5 以降
- Scientific Linux 5 以降
- Debian GNU/Linux 5 以降
- Ubuntu 8.04 LTS 以降
- Solaris 10 以降
- Mac OS X 10.5 以降

 一部のモジュールは Solaris と Mac OS X に未対応である。


============
インストール
============

 install.sh を実行することで
ソフトウェアをインストールすることができる。

第 1 引数にはインストール先のディレクトリを指定する。
デフォルトは /opt/deferred-sync である。
このディレクトリは通常 root 権限が無いと書き込めない
ため、内部的に sudo を利用する。

第 2 引数には nosudo を指定する。
たとえば第 1 引数に ~/local/deferred-sync を指定した
場合は sudo を利用する必要が無い。

(ユーザーのホームディレクトリにインストールする例)
install.sh ~/local/deferred-sync nosudo

(/usr/local/deferred-sync にインストールする例)
install.sh /usr/local/deferred-sync

(/opt/deferred-sync にインストールする例)
install.sh

インストールが完了したら次項に示す設定ファイルを
編集し、動作をカスタマイズする。

引数無しで実行した場合は、自動的に /etc/cron.daily と
/etc/logrotate.d にファイルが配置され、日々の自動実行と
ログローテーションが既定で設定される。


=============================
設定ファイル config/sync.conf
=============================

 deferred-sync の設定ファイルであり全体の動作を定義
する。パラメータは以下のように一行ずつ定義する。

値=定義
# が出現した場合残りはコメント扱いとなる。

定義が複数の場合は " " で囲みスペースを開けて羅列する。

各モジュールで値を必要とする場合はすべてこの設定
ファイル config/sync.conf 内に定義することで自動的に
読み込まれ利用される。

設定のなかにはパスワードそのものを記述することもある。
したがって、この設定ファイルは管理担当ユーザーが
参照のみ可能となるようパーミッションを設定しておく
ことが望ましい。


==============
主要な設定項目
==============

設定ファイル config/sync.conf は単なる実行形式の
スクリプトとして読み込まれるため柔軟な設定が可能である。

主な設定項目としては以下がある。

BACKUPDIRS
世代バックアップの対象とするディレクトリ。
複数指定可能である。

BACKUPTO
バックアップ先として退避するディレクトリ。
ローカルホストの上記のディレクトリに集約される。

EXPIREDAYS
履歴を何日間まで残すか。
この日数を超えた世代バックアップは削除される。

EXCLUDEFILE
バックアップの対象外とするファイル名。

JOBLOG
実行結果のログファイル名。

ADMIN_MAIL_ADDRESS
ここにシステム管理者のメールアドレスを記載すると
終了時に結果がメールされる。
メールを送信する場合は mail と nkf コマンドを利用する。
したがって mailx 及び nkf パッケージを予めシステムに
インストールしておく必要がある。

LOAD_MODULES_ALL
強制的にすべてのモジュールを読み込む。
通常は false に設定する。

MODULES
利用するモジュール名を個別に指定する。

たとえば SVN のダンプを取得し世代管理した上で
リモートホストに転送するなら以下の通りになる。
MODULES="dump_svn incremental_backup backup_to_remote"


================
テストの実施方法
================

 deferred-sync にはユニットテスト機構があり
本番環境で動作させる前にテスト実行してエビデンスを
取得することができる。

 bin/run の引数には設定ファイル名を指定すること
ができる。
 以下のように test/test.conf を指定することで、本来
とは異なるテスト用の設定で処理を実行できる。
bin/run test/test.conf

 また --test が引数に指定されると test/test.conf が
指定されたものと見なされ読み込まれる。
 test/test.conf はテスト実行時の設定ファイルである。
bin/run --test

 設定ファイルで以下の通り記述することで rsync が実際
には実行されずテスト実行される。
 テスト用設定ファイルでは DRY_RUN=true にするとテスト
をスムーズにおこなうことができる。
DRY_RUN=true

 本ソフトウェアを改変する場合も、あらかじめユニット
テストを作成し、それらが実行される状態を維持するように
変更していくことを推奨する。


==========
モジュール
==========

なぜモジュールを使うのか
 lib/modules の下に機能毎にコードのかたまりを分割しており
これをモジュールと呼称する。各コードを独立させる
ことで、インストールするシステムや要件ごとに異なる
動作をさせたり、必要な機能追加を最小限のコードで
実現したりすることができる。

モジュールの実装方法
 lib/load によって順次呼び出される。

LOAD_MODULES_ALL=true のとき
 lib/modules の下のモジュールがすべて読み込まれる。
読み込まれる順序はファイル名によるので、先頭に
番号を付与することで前後関係を明示できる。

LOAD_MODULES_ALL=false のとき
 設定ファイルの MODULES で指定されたモジュール
が指定順に読み込まれる。


主要なモジュールの説明については
 doc/MODULES.ja を参照
