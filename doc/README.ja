deferred-sync

名前
 deferred-sync - 遅延した同期をおこないファイルを保護する

書式
 bin/runner.sh

説明
 deferred-sync はローカルで保護対象とするべきファイルを
一箇所のディレクトリに集め、世代管理をおこない、リモート
ホストに同期してバックアップする。

保護対象とするディレクトリは複数指定することができる。
また独立したモジュールと呼ばれるコードを追加することに
より Subversion (SVN) や MySQL, PostgreSQL といったリポ
ジトリやデータベースのダンプを取得し対象とすることも可能
である。

どのモジュールを有効にするかは全体の動作を定義する
sync.conf で設定することができる。

ファイルの世代管理やリモートホストへの転送のために rsync
を内部的に利用している。したがって耐障害性や信頼性は
rsync (及び ssh) に依存する。
詳しくは rsync(1) の man ページを参照のこと。

主なディレクトリとファイルの構成は以下の通りである。
.
|
+-bin 
|   runner.sh 実行ファイル
|
+-conf
|   sync.conf 全体の動作を決定する設定ファイル
|
+-lib
|   get_resources.sh      リソースの取得をおこなうモジュール
|   dump_svn.sh           SVN ダンプを取得するモジュール
|   dump_mysql.sh         MySQL ダンプを取得するモジュール
|   incremental_backup.sh 世代バックアップをするモジュール
|   backup_to_remote.sh   リモートホストへ同期するモジュール
|     このディレクトリには任意にモジュールを作成し追加できる
|
+-installer
|   install_deferredsync.sh インストーラー
|     引数で指定したディレクトリに deferred-sync を
|     インストールする
|
+-test
|   test.conf テスト実行時に読み込まれる
|     このディレクトリには回帰テストのためのコードが置かれる   
|
+-doc
    README.ja 本ドキュメント

動作環境
 一般的な GNU/Linux 及び UNIX 互換環境で動作する。

次の環境で動作する。

- Red Hat Enterprise Linux 5/6
- CentOS 5/6
- Scientific Linux 6
- Debian GNU/Linux 5.0/6.0
- Ubuntu 10.04 LTS/11.10
- Solaris 10/11
- Mac OS X 10.6/10.7


運用例
 cron から deferred-sync/bin/runner.sh を定期的に
実行するように設定する。これにより保護対象のファイル
及びディレクトリが自動的に一箇所に集められる。

バックアップ用にリモートホストを異なる場所に設置して
おくことで、自動的に同期がおこなわれ、障害発生時に
リモートから復旧することが可能となる。

またファイルは世代バックアップされているため、誤操作
でファイルを上書きした場合でも、以前の世代から復旧す
ることも可能である。保存する世代数は設定ファイルで
決定する。

+----------------------+
|     本 番 環 境      | (データセンター)
+----------------------+
           |
           | cron で毎日実行され同期される
           |
+----------------------+
| バックアップサーバー | (遠隔地)
+----------------------+

これらは物理マシンである必要はなく、物理的に独立した
ハイパーバイザー上の別の仮想マシンでも良い。


主な用途
 リポジトリサーバーやデータベースサーバーの対障害用
バックアップ、ファイルサーバーや NAS のバックアップ
などに利用できる。

他には静的な Web コンテンツの遅延同期に利用したり
キャッシュをレプリケーションするなど rsync を活用
可能なあらゆる場面に適用できる。

リモートサーバーと通信可能なときのみ同期をおこなう
ので Mac の Time Machine のようにクライアント PC の
バックアップソリューションとして利用することもできる。
(Time Machine も実は内部的に rsync を利用した単なる
ファイルコピープログラムにすぎない)



設定ファイル config/sync.conf の説明

 deferred-sync の設定ファイルであり全体の動作を定義
する。パラメータは以下のように一行ずつ定義する。

値=定義
# が出現した場合残りはコメント扱いとなる。

定義が複数の場合は " " で囲みスペースを開けて羅列する。

各モジュールで値を必要とする場合はすべてこの設定
ファイル config/sync.conf 内に定義することで自動的に
読み込まれ利用される。

設定のなかにはパスワードそのものを記述することもある。
したがって、この設定ファイルは管理担当ユーザーが
参照のみ可能となるようパーミッションを設定しておく
ことが望ましい。


各モジュールの説明

* lib/dump_svn.sh
SVN ダンプを取得する。

[概要]
SVN をダンプし zip でアーカイブする。
svndump は冗長性が高いため zip で圧縮することで
容量を節約する。

[実行条件]
backup_to_remote と併用する場合はその実行前に
本モジュールが呼ばれるようにする。

SVNPATH には SVN の設定ファイルで定義された
SVNParentPath のパスを指定する。
この場合マルチテナントであっても SVN_REPOS に
複数のリポジトリ名を指定することですべてダンプ
することが可能になる。

[仕様]
dump_svn 関数
設定ファイルで定義された変数 SVN_REPOS の文字列
に定義されたホスト名を解釈し
get_svndump 関数に渡す。
SVN_REPOS は SVN リポジトリ名を指定する。
スペースで区切って複数指定することができる。

(例)
SVN_REPOS="repoa repob project"

get_svndump 関数
設定ファイルで定義された変数 SVNDUMP のディレクトリ
に SVN ダンプを取得し保存する。


* lib/dump_mysql.sh
MySQL ダンプを取得する。

[概要]
MySQL のデータベースをダンプし zip でアーカイブする。
mysqldump は冗長性が高いため zip で圧縮することで
容量を節約する。

[実行条件]
backup_to_remote と併用する場合はその実行前に
本モジュールが呼ばれるようにする。

MySQL に接続するためのユーザー名とパスワードを
MYSQL_USER 及び MYSQL_PASS に定義する。
データベースごとにユーザーとパスワードを使い
分けることはできない。したがってダンプするすべての
データベースを参照可能なユーザーを指定する。

[仕様]
dump_mysql 関数
設定ファイルで定義された変数 MYSQL_DBS の文字列
に定義されたデータベース名を解釈し
get_mysqldump 関数に渡す。

(例)
MYSQL_DBS="db_a db_b mysql"

get_mysqldump 関数
設定ファイルで定義された変数 MYSQLDUMP のディレクトリ
に MySQL ダンプを取得し保存する。


* lib/incremental_backup.sh
世代バックアップを取得する。

[概要]
ローカルホスト内で、保護対象のファイル一式を
退避用のディレクトリに一旦集める。

backup_to_remote を利用して退避したディレクトリ
をリモートホストに転送することで対障害性を確保
することができる。

また退避したディレクトリを外部ディスクに書き出
してバックアップとすることもできる。

いずれにせよ incremental_backup では保護対象の
ファイルを退避用のディレクトリに集めただけなの
で、これに追加して何らかの保護をする必要がある。
通常は backup_to_remote モジュールでリモート
ホストに同期するが、このディレクトリを外部記憶
媒体にコピーするなど他の方法も考えられる。

[世代管理]
保護対象のファイルは rsync の --delete 機能を
利用して変更されたファイルのみ退避する。
またこの際、変更前のファイルは _backup_日付
というディレクトリに退避される。
これにより世代を遡ってリストアすることが可能
である。

[対象除外]
backup_exclude ファイルに除外するファイル名を
羅列することにより、マッチしたファイルを対象
から除外することができる。

たとえば dot で始まるディレクトリ名や、一時
ファイルの類など、保護する必要の無いファイル
を指定することができる。

[実行条件]
SVN ダンプや MySQL ダンプを退避して世代管理
したい場合は、これらのモジュールが本モジュール
より先に実行されるようにするべきである。

[仕様]
run_rsync 関数
設定ファイルで定義された変数 BACKUPDIRS 
に定義されたディレクトリ名を解釈し
exec_rsync 関数に渡す。

BACKUPDIRS にはディレクトリ名をスペースで
区切って羅列する。ここに定義されたディレクトリ
にあるファイルは退避用のディレクトリにコピー
される。これらは世代管理される。

(例)
BACKUPDIRS="/home/myname /etc /var/log"

purge_expires 関数
世代管理で保護された増分バックアップのうち
EXPIREDAYS に定義された日数以上経過した
ディレクトリを破棄する。

例えばスクリプトの実行日が 2011/10/30 で
EXPIREDAYS が 5 の場合 _backup_20111025 
より古いディレクトリは破棄される。

purge_expire_dir 関数
上記の purge_expires 関数から呼ばれ、
実際にディレクトリを削除する処理をする。

rsync_options 関数
最終的に rsync に渡すオプションを生成する。
増分バックアップの退避用ディレクトリ、日付、
除外ファイルがここで rsync のオプションに
変換されマージされる。

exec_rsync 関数
生成された rsync のオプションを引数にして
実際に rsync を実行する。


* lib/backup_to_remote.sh
リモートホストへのファイル転送をおこなう

[概要]
rsync で自動的に他のホストへ保護対象のファイル
を転送する。ローカルホスト障害時に他のホストか
らデータを転送してリカバリすることができる。

複数の拠点にコピーを生成することもでき、リモー
トサイトでは sshd だけ稼働していれば良い。

ポート番号など ssh 接続にパラメータが必要な場
合は ~/.ssh/config で設定することができる。

[実行条件]
本モジュールを利用するためにはローカルホストの
スクリプト実行ユーザーからリモートホストの root
ユーザーへのパスワード無し公開鍵認証が可能であ
る必要がある。

リモートホストの sshd_config にて以下の値を設定
することを推奨する。
PermitRootLogin without-password
ChallengeResponseAuthentication no
usePAM no

[仕様]
backup_to_remote 関数
設定ファイルで定義された変数 REMOTE_HOSTS の文字列
に定義されたホスト名を解釈し
mirror_to_remote 関数に渡す。
REMOTE_HOSTS はリモートホスト名を指定する。
スペースで区切って複数指定することができる。

(例)
REMOTE_HOSTS="hosta hostb 192.168.1.50"

mirror_to_remote 関数
設定ファイルで定義された変数 BACKUPTO のディレクトリ
以下 (ローカルの退避ディレクトリ) をリモートホストに
rsync する。
最初にリモートホストに ping による生死確認をして、
リモートホストから反応が無い場合はリターンコード 1 で
終了する。 (ping が返すリターンコードがそのまま戻る)


モジュールは他にも任意に作成し追加しても良い。



テスト

 test/test.conf はテスト実行時の設定ファイルである。
bin/runner.sh の引数には設定ファイル名を指定すること
ができる。

 以下のように test/test.conf を指定することで、本来
とは異なるテスト用の設定で処理を実行できる。
bin/runner.sh test/test.conf

 また --test が引数に指定されると test/test.conf が
指定されたものと見なされ読み込まれる。
bin/runner.sh --test

 設定ファイルで以下の通り記述することで rsync が実際
には実行されずテスト実行される。
DRY_RUN=true

 テスト用設定ファイルでは DRY_RUN=true にするとテスト
をスムーズにおこなうことができる。





