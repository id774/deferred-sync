#!/bin/sh
#
# deferred-sync - The main execution script for deferred-sync.
#
# Description:
#   This script performs incremental backups, system synchronization,
#   and remote transfers, either manually or through cron.
#
# Features:
#   - Loads configuration from `config/sync.conf`
#   - Executes pre-sync (`STARTSCRIPT`) and post-sync (`ENDSCRIPT`) scripts if defined
#   - Dynamically loads plugins via `lib/load`
#   - Logs all operations to `JOBLOG`
#   - Sends a notification email upon completion (if configured)
#
# Behavior:
#   - Each major phase (STARTSCRIPT, load, ENDSCRIPT) runs sequentially.
#   - If any of them exits with a non-zero status, a [WARN] message is printed,
#     but execution continues to the next phase.
#   - All standard output and errors, including WARN messages, are appended
#     to the job log (`JOBLOG`). No stderr is emitted during normal runs.
#
# Notes:
#   - Ensure that `config/sync.conf` and related scripts are properly configured.
#   - This script follows POSIX compliance and does not abort on non-critical failures.

setup() {
    LANG=C
    LC_ALL=C
    CONFIG=${1:-config/sync.conf}

    # Determine script home directory
    SCRIPT_HOME=$(cd "$(dirname "$0")" && pwd)/..

    # Check if config file is readable
    if [ ! -r "${SCRIPT_HOME}/${CONFIG}" ]; then
        echo "[ERROR] Config file not found or unreadable: ${SCRIPT_HOME}/${CONFIG}" >&2
        exit 3
    fi
    . "${SCRIPT_HOME}/${CONFIG}"

    EXECDIR=$(dirname "$0")
    DATE=$(date +%Y%m%d)

    # Check if JOBLOG is writable
    if [ ! -w "$JOBLOG" ] && ! touch "$JOBLOG" 2>/dev/null; then
        echo "[ERROR] JOBLOG is not writable: $JOBLOG" >&2
        exit 1
    fi
}

send_mail_to_admin() {
    # Send job log to administrator (fall back if nkf or mail is absent)
    SUBJ="[cron][$(hostname)] Deferred Sync Log"
    if command -v nkf >/dev/null 2>&1; then
        TO_SEND=$(nkf -w <"$JOBLOG")
    else
        TO_SEND=$(cat "$JOBLOG")
    fi
    if ! printf "%s" "$TO_SEND" | mail -s "$SUBJ" "$ADMIN_MAIL_ADDRESS"; then
        echo "[ERROR] Failed to send mail to $ADMIN_MAIL_ADDRESS" >&2
    fi
}

deferred_sync() {
    # Log job start time
    {
        printf -- "*** %s: Job started on %s at " "$0" "$(hostname)"
        date "+%Y/%m/%d %T"
    } >>"$JOBLOG" 2>&1

    # Execute pre-sync script if defined
    if [ -n "$STARTSCRIPT" ]; then
        . "$STARTSCRIPT" >>"$JOBLOG" 2>&1
        st=$?
        [ "$st" -ne 0 ] && echo "[WARN] STARTSCRIPT exited with status $st" >>"$JOBLOG" 2>&1
    fi

    # Load and execute plugins
    . "$SCRIPT_HOME/lib/load" >>"$JOBLOG" 2>&1
    st=$?
    [ "$st" -ne 0 ] && echo "[WARN] load exited with status $st" >>"$JOBLOG" 2>&1

    # Execute post-sync script if defined
    if [ -n "$ENDSCRIPT" ]; then
        . "$ENDSCRIPT" >>"$JOBLOG" 2>&1
        st=$?
        [ "$st" -ne 0 ] && echo "[WARN] ENDSCRIPT exited with status $st" >>"$JOBLOG" 2>&1
    fi

    # Log job completion time
    {
        printf -- "*** %s: Job ended on %s at " "$0" "$(hostname)"
        date "+%Y/%m/%d %T"
        echo
    } >>"$JOBLOG" 2>&1

    # Send job log via email if configured
    [ -n "$ADMIN_MAIL_ADDRESS" ] && send_mail_to_admin
}

# Main function to execute the script
main() {
    setup "$@"
    deferred_sync
    return 0
}

# Execute main function
main "$@"
exit $?
