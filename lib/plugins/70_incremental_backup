#!/bin/sh
#
# 70_incremental_backup - A script to perform incremental backups with rsync.
#
# Required environment variables:
#   BACKUPTO    : Target backup directory.
#                 Example: /var/backups
#   BACKUPDIRS  : List of directories to back up (space-separated).
#                 Example: "/home /etc /var/www"
#   EXCLUDEFILE : File containing patterns of files/directories to exclude.
#                 Example: /etc/backup_exclude.conf
#   DRY_RUN     : If set to "true", rsync runs in dry-run mode.
#   EXPIREDAYS  : Number of days before old backups are purged.
#
# Note:
#   - This script assumes that `rsync` is installed and available.

DATE=${DATE:-$(date +%Y%m%d)}

start_message() {
    printf -- "[INFO] Loading: incremental_backup has been loaded at "
    date "+%Y/%m/%d %T"
}

purge_expire_dir() {
    while [ "$#" -gt 0 ]; do
        BDATE=$(echo "$1" | sed "s/_backup_//")
        EXPIREDATE=$(date -d "$EXPIREDAYS days ago" +%Y%m%d)

        if [ "$BDATE" -le "$EXPIREDATE" ]; then
            printf -- "deleting %s/%s\n" "$BACKUPTO" "$1"
            rm -rf "$BACKUPTO/$1"
        fi
        shift
    done
    return 0
}

purge_expires() {
    printf -- "[INFO] Deleting old backup directories at "
    date "+%Y/%m/%d %T"

    for DIR in "$BACKUPTO"/*_backup_*; do
        [ -e "$DIR" ] && purge_expire_dir "$(basename "$DIR")"
    done
    return $?
}

rsync_options() {
    OPTS="--force --delete-excluded \
      --delete --backup \
      --backup-dir=$BACKUPTO/_backup_$DATE \
      -av"

    if [ -f "$EXCLUDEFILE" ]; then
        OPTS="$OPTS --exclude-from=/dev/stdin"
    fi
    [ "$DRY_RUN" = "true" ] && OPTS="$OPTS --dry-run"
    return 0
}

exec_rsync() {
    printf -- "[INFO] Executing: backup with rsync at "
    date "+%Y/%m/%d %T"

    FAILED=0
    for BACKUPDIR in $BACKUPDIRS; do
        printf -- "[INFO] rsync %s %s %s\n" "$OPTS" "$BACKUPDIR" "$BACKUPTO"
        if [ -f "$EXCLUDEFILE" ]; then
            # Feed non empty non comment lines to --exclude-from=/dev/stdin
            grep -v '^[# ]*$' "$EXCLUDEFILE" | rsync $OPTS "$BACKUPDIR" "$BACKUPTO"
        else
            rsync $OPTS "$BACKUPDIR" "$BACKUPTO"
        fi
        RC=$?
        echo "[INFO] Return code is $RC"
        [ $RC -ne 0 ] && FAILED=$RC
    done
    return $FAILED
}

run_rsync() {
    purge_expires || return $?
    rsync_options || return $?
    exec_rsync || return $?
}

main() {
    start_message
    run_rsync
    return $?
}

main "$@"
