#!/bin/sh
#
# 31_dump_postgresql - A script to dump the entire PostgreSQL database cluster and compress the dump.
#
# Required environment variables:
#   PGDUMP   : Directory where the dump files (SQL and compressed files) will be stored.
#              Example: /var/lib/postgresql/pg_dump
#   PG_USER  : PostgreSQL username.
#              Example: postgres
#
# Note:
#   - This script assumes that authentication is handled via ~/.pgpass

start_message() {
    printf -- "[INFO] Loading: dump_postgresql has been loaded at "
    date "+%Y/%m/%d %T"
}

dump_postgresql() {
    # Check PGDUMP env and directory before touching files
    if [ -z "${PGDUMP:-}" ]; then
        printf -- "[WARN] PGDUMP is empty. Skipping dump.\n" >&2
        return 1
    fi

    # Check if PGDUMP directory exists and change to it
    if [ ! -d "$PGDUMP" ]; then
        printf -- "[WARN] Target directory %s does not exist. Skipping dump.\n" "$PGDUMP" >&2
        return 1
    fi
    cd "$PGDUMP" || return 1

    # Remove existing compressed dump if it exists (after cd)
    [ -f "all.dump.gz" ] && rm "all.dump.gz"

    printf -- "[INFO] Executing: pg_dumpall at "
    date "+%Y/%m/%d %T"

    # Perform the dump and compress the output using sudo
    sudo -u "$PG_USER" sh -c "pg_dumpall -c > 'all.dump' && gzip -f 'all.dump'"

    RC=$?
    echo "[INFO] Return code is $RC"
    return $RC
}

main() {
    start_message
    dump_postgresql
    return $?
}

main "$@"
